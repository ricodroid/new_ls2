// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -module-name shared
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import shared
extension shared.__SwiftGen.RuntimeQueryResult {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.RuntimeQueryResult.Enum, b: shared.__SwiftGen.RuntimeQueryResult.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.RuntimeQueryResult.Enum where SEALED : shared.RuntimeQueryResult
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftSharedFlow<T>._ObjectiveCType?) -> shared.SkieSwiftSharedFlow<T>
  @objc deinit
}
#endif
extension shared.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func body(info: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo) async throws -> Any
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer, n: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: shared.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFully(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeInt(i: Swift.Int32) async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftOptionalFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalFlow<T>._ObjectiveCType?) -> shared.SkieSwiftOptionalFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType?) -> shared.SkieSwiftOptionalSharedFlow<T>
  @objc deinit
}
#endif
extension shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum, b: shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum where SEALED : shared.Kotlinx_serialization_coreSerializersModule
extension shared.Ktor_utilsWeekDay {
  public func toKotlinEnum() -> shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
}
extension shared.__Ktor_utilsWeekDay {
  public func toSwiftEnum() -> shared.Ktor_utilsWeekDay
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableSharedFlow<T>._ObjectiveCType?) -> shared.SkieSwiftMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType?) -> shared.SkieSwiftOptionalMutableSharedFlow<T>
  @objc deinit
}
#endif
public enum __Skie {
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieColdFlowIterator = shared.SkieColdFlowIterator
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinFlow = shared.SkieKotlinFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftFlow = shared.SkieSwiftFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_Flow = shared.Kotlinx_coroutines_coreFlow
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinMutableSharedFlow = shared.SkieKotlinMutableSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftMutableSharedFlow = shared.SkieSwiftMutableSharedFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_MutableSharedFlow = shared.Kotlinx_coroutines_coreMutableSharedFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_SharedFlow = shared.Kotlinx_coroutines_coreSharedFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_FlowCollector = shared.Kotlinx_coroutines_coreFlowCollector
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinMutableStateFlow = shared.SkieKotlinMutableStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftMutableStateFlow = shared.SkieSwiftMutableStateFlow
  #endif
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_MutableStateFlow = shared.Kotlinx_coroutines_coreMutableStateFlow
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_flow_StateFlow = shared.Kotlinx_coroutines_coreStateFlow
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalFlow = shared.SkieKotlinOptionalFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalFlow = shared.SkieSwiftOptionalFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalMutableSharedFlow = shared.SkieKotlinOptionalMutableSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalMutableSharedFlow = shared.SkieSwiftOptionalMutableSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalMutableStateFlow = shared.SkieKotlinOptionalMutableStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalMutableStateFlow = shared.SkieSwiftOptionalMutableStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalSharedFlow = shared.SkieKotlinOptionalSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalSharedFlow = shared.SkieSwiftOptionalSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinOptionalStateFlow = shared.SkieKotlinOptionalStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftOptionalStateFlow = shared.SkieSwiftOptionalStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinSharedFlow = shared.SkieKotlinSharedFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftSharedFlow = shared.SkieSwiftSharedFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_flow_SkieKotlinStateFlow = shared.SkieKotlinStateFlow
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias swift__SkieSwiftStateFlow = shared.SkieSwiftStateFlow
  #endif
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_CancellationHandler = shared.Skie_CancellationHandler
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_DispatcherDelegate = shared.Skie_DispatcherDelegate
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendHandler = shared.Skie_SuspendHandler
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult = shared.Skie_SuspendResult
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Canceled = shared.Skie_SuspendResult.Canceled
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Error = shared.Skie_SuspendResult.Error
  public typealias class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Success = shared.Skie_SuspendResult.Success
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_BaseViewModel = shared.BaseViewModel
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_Platform = shared.Platform
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_db_DatabaseDriverFactory = shared.DatabaseDriverFactory
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticleRaw = shared.ArticleRaw
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticleRaw_Companion = shared.ArticleRaw.Companion
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticlesDataSource = shared.ArticlesDataSource
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticlesRepository = shared.ArticlesRepository
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticlesResponse = shared.ArticlesResponse
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticlesResponse_Companion = shared.ArticlesResponse.Companion
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticlesService = shared.ArticlesService
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_presentation_ArticlesState = shared.ArticlesState
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_presentation_ArticlesViewModel = shared.ArticlesViewModel
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_application_Article = shared.Article
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_application_ArticlesUseCase = shared.ArticlesUseCase
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_application_Source = shared.Source
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_application_SourcesUseCase = shared.SourcesUseCase
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourceRaw = shared.SourceRaw
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourceRaw_Companion = shared.SourceRaw.Companion
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourcesDataSource = shared.SourcesDataSource
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourcesRepository = shared.SourcesRepository
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourcesResponse = shared.SourcesResponse
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourcesResponse_Companion = shared.SourcesResponse.Companion
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourcesService = shared.SourcesService
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_presentation_SourcesState = shared.SourcesState
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_presentation_SourcesViewModel = shared.SourcesViewModel
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_di_ArticlesInjector = shared.ArticlesInjector
  public typealias class__io_insert_koin_koin_core__org_koin_core_component_KoinComponent = shared.Koin_coreKoinComponent
  public typealias class__DailyPulse_shared__com_petros_efthymiou_dailypulse_di_SourcesInjector = shared.SourcesInjector
  public typealias class__DailyPulse_shared__petros_efthymiou_dailypulse_db_Article = shared.Article_
  public typealias class__DailyPulse_shared__petros_efthymiou_dailypulse_db_DailyPulseDatabase = shared.DailyPulseDatabase
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_Transacter = shared.RuntimeTransacter
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_TransacterBase = shared.RuntimeTransacterBase
  public typealias class__DailyPulse_shared__petros_efthymiou_dailypulse_db_DailyPulseDatabase_Companion = shared.DailyPulseDatabaseCompanion
  public typealias class__DailyPulse_shared__petros_efthymiou_dailypulse_db_DailyPulseDatabaseQueries = shared.DailyPulseDatabaseQueries
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_TransacterImpl = shared.RuntimeTransacterImpl
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_BaseTransacterImpl = shared.RuntimeBaseTransacterImpl
  public typealias class__DailyPulse_shared__petros_efthymiou_dailypulse_db_Source = shared.Source_
  public typealias class__stdlib__kotlin_coroutines_cancellation_CancellationException = shared.KotlinCancellationException
  public typealias class__stdlib__kotlin_IllegalStateException = shared.KotlinIllegalStateException
  public typealias class__stdlib__kotlin_RuntimeException = shared.KotlinRuntimeException
  public typealias class__stdlib__kotlin_Exception = shared.KotlinException
  public typealias class__stdlib__kotlin_Throwable = shared.KotlinThrowable
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_Runnable = shared.Kotlinx_coroutines_coreRunnable
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineScope = shared.Kotlinx_coroutines_coreCoroutineScope
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_SqlDriver = shared.RuntimeSqlDriver
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_Closeable = shared.RuntimeCloseable
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_KSerializer = shared.Kotlinx_serialization_coreKSerializer
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_SerializationStrategy = shared.Kotlinx_serialization_coreSerializationStrategy
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_DeserializationStrategy = shared.Kotlinx_serialization_coreDeserializationStrategy
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_HttpClient = shared.Ktor_client_coreHttpClient
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Closeable = shared.Ktor_ioCloseable
  public typealias class__io_insert_koin_koin_core__org_koin_core_Koin = shared.Koin_coreKoin
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_TransactionWithoutReturn = shared.RuntimeTransactionWithoutReturn
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_TransactionCallbacks = shared.RuntimeTransactionCallbacks
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_TransactionWithReturn = shared.RuntimeTransactionWithReturn
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_SqlSchema = shared.RuntimeSqlSchema
  public typealias class__stdlib__kotlin_Unit = shared.KotlinUnit
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_Transacter_Transaction = shared.RuntimeTransacterTransaction
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_Query = shared.RuntimeQuery
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_ExecutableQuery = shared.RuntimeExecutableQuery
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_SuspendingTransacter = shared.RuntimeSuspendingTransacter
  public typealias class__stdlib__kotlin_coroutines_SuspendFunction1 = shared.KotlinSuspendFunction1
  public typealias class__stdlib__kotlin_Function = shared.KotlinFunction
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ProtocolUpgrade = shared.Ktor_httpOutgoingContent.ProtocolUpgrade
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent = shared.Ktor_httpOutgoingContent
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ByteReadChannel = shared.Ktor_ioByteReadChannel
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ByteWriteChannel = shared.Ktor_ioByteWriteChannel
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext = shared.KotlinCoroutineContext
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_WriteChannelContent = shared.Ktor_httpOutgoingContent.WriteChannelContent
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_QueryResult = shared.RuntimeQueryResult
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngine = shared.Ktor_client_coreHttpClientEngine
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestData = shared.Ktor_client_coreHttpRequestData
  public typealias class__io_ktor_ktor_utils__io_ktor_util_pipeline_Pipeline = shared.Ktor_utilsPipeline
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory = shared.Ktor_ioMemory
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer = shared.Ktor_ioChunkBuffer
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer = shared.Ktor_ioBuffer
  public typealias class__stdlib__kotlin_ByteArray = shared.KotlinByteArray
  public typealias class__stdlib__kotlin_text_Appendable = shared.KotlinAppendable
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket = shared.Ktor_ioByteReadPacket
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Input = shared.Ktor_ioInput
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_Job = shared.Kotlinx_coroutines_coreJob
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext_Element = shared.KotlinCoroutineContextElement
  public typealias class__stdlib__kotlin_coroutines_SuspendFunction2 = shared.KotlinSuspendFunction2
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_call_HttpClientCall = shared.Ktor_client_coreHttpClientCall
  public typealias class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo = shared.Ktor_utilsTypeInfo
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind = shared.Kotlinx_serialization_corePolymorphicKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind = shared.Kotlinx_serialization_coreSerialKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind = shared.Kotlinx_serialization_corePrimitiveKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_CONTEXTUAL = shared.Kotlinx_serialization_coreSerialKind.CONTEXTUAL
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_ENUM = shared.Kotlinx_serialization_coreSerialKind.ENUM
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind = shared.Kotlinx_serialization_coreStructureKind
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_OPEN = shared.Kotlinx_serialization_corePolymorphicKind.OPEN
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_SEALED = shared.Kotlinx_serialization_corePolymorphicKind.SEALED
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BOOLEAN = shared.Kotlinx_serialization_corePrimitiveKind.BOOLEAN
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BYTE = shared.Kotlinx_serialization_corePrimitiveKind.BYTE
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_CHAR = shared.Kotlinx_serialization_corePrimitiveKind.CHAR
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_DOUBLE = shared.Kotlinx_serialization_corePrimitiveKind.DOUBLE
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_FLOAT = shared.Kotlinx_serialization_corePrimitiveKind.FLOAT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_INT = shared.Kotlinx_serialization_corePrimitiveKind.INT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_LONG = shared.Kotlinx_serialization_corePrimitiveKind.LONG
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_SHORT = shared.Kotlinx_serialization_corePrimitiveKind.SHORT
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_STRING = shared.Kotlinx_serialization_corePrimitiveKind.STRING
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_CLASS = shared.Kotlinx_serialization_coreStructureKind.CLASS
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_LIST = shared.Kotlinx_serialization_coreStructureKind.LIST
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_MAP = shared.Kotlinx_serialization_coreStructureKind.MAP
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_OBJECT = shared.Kotlinx_serialization_coreStructureKind.OBJECT
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ByteArrayContent = shared.Ktor_httpOutgoingContent.ByteArrayContent
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_NoContent = shared.Ktor_httpOutgoingContent.NoContent
  public typealias class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ReadChannelContent = shared.Ktor_httpOutgoingContent.ReadChannelContent
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause1 = shared.Kotlinx_coroutines_coreSelectClause1
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause = shared.Kotlinx_coroutines_coreSelectClause
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause2 = shared.Kotlinx_coroutines_coreSelectClause2
  public typealias class__io_insert_koin_koin_core__org_koin_core_module_Module = shared.Koin_coreModule
  public typealias class__stdlib__kotlin_Array = shared.KotlinArray
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_Query_Listener = shared.RuntimeQueryListener
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_SqlPreparedStatement = shared.RuntimeSqlPreparedStatement
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_SqlCursor = shared.RuntimeSqlCursor
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_Encoder = shared.Kotlinx_serialization_coreEncoder
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialDescriptor = shared.Kotlinx_serialization_coreSerialDescriptor
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_Decoder = shared.Kotlinx_serialization_coreDecoder
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngineConfig = shared.Ktor_client_coreHttpClientEngineConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_HttpClientConfig = shared.Ktor_client_coreHttpClientConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_HttpClientEngineCapability = shared.Ktor_client_coreHttpClientEngineCapability
  public typealias class__io_ktor_ktor_utils__io_ktor_util_Attributes = shared.Ktor_utilsAttributes
  public typealias class__io_ktor_ktor_events__io_ktor_events_Events = shared.Ktor_eventsEvents
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpReceivePipeline = shared.Ktor_client_coreHttpReceivePipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestPipeline = shared.Ktor_client_coreHttpRequestPipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponsePipeline = shared.Ktor_client_coreHttpResponsePipeline
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpSendPipeline = shared.Ktor_client_coreHttpSendPipeline
  public typealias class__io_insert_koin_koin_core__org_koin_core_scope_Scope = shared.Koin_coreScope
  public typealias class__io_insert_koin_koin_core__org_koin_mp_Lockable = shared.Koin_coreLockable
  public typealias class__io_insert_koin_koin_core__org_koin_core_component_KoinScopeComponent = shared.Koin_coreKoinScopeComponent
  public typealias class__io_insert_koin_koin_core__org_koin_core_qualifier_Qualifier = shared.Koin_coreQualifier
  public typealias class__stdlib__kotlin_reflect_KClass = shared.KotlinKClass
  public typealias class__stdlib__kotlin_reflect_KDeclarationContainer = shared.KotlinKDeclarationContainer
  public typealias class__stdlib__kotlin_reflect_KAnnotatedElement = shared.KotlinKAnnotatedElement
  public typealias class__stdlib__kotlin_reflect_KClassifier = shared.KotlinKClassifier
  public typealias class__io_insert_koin_koin_core__org_koin_core_parameter_ParametersHolder = shared.Koin_coreParametersHolder
  public typealias class__stdlib__kotlin_Lazy = shared.KotlinLazy
  public typealias class__stdlib__kotlin_LazyThreadSafetyMode = shared.__KotlinLazyThreadSafetyMode
  public typealias swift__KotlinLazyThreadSafetyMode = shared.KotlinLazyThreadSafetyMode
  public typealias class__stdlib__kotlin_Enum = shared.KotlinEnum
  public typealias class__stdlib__kotlin_Comparable = shared.KotlinComparable
  public typealias class__io_insert_koin_koin_core__org_koin_core_logger_Logger = shared.Koin_coreLogger
  public typealias class__io_insert_koin_koin_core__org_koin_core_extension_ExtensionManager = shared.Koin_coreExtensionManager
  public typealias class__io_insert_koin_koin_core__org_koin_core_registry_InstanceRegistry = shared.Koin_coreInstanceRegistry
  public typealias class__io_insert_koin_koin_core__org_koin_core_registry_PropertyRegistry = shared.Koin_corePropertyRegistry
  public typealias class__io_insert_koin_koin_core__org_koin_core_registry_ScopeRegistry = shared.Koin_coreScopeRegistry
  public typealias class__app_cash_sqldelight_runtime__app_cash_sqldelight_db_AfterVersion = shared.RuntimeAfterVersion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_AttributeKey = shared.Ktor_utilsAttributeKey
  public typealias class__io_ktor_ktor_http__io_ktor_http_Headers = shared.Ktor_httpHeaders
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValues = shared.Ktor_utilsStringValues
  public typealias class__io_ktor_ktor_http__io_ktor_http_ContentType = shared.Ktor_httpContentType
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueWithParameters = shared.Ktor_httpHeaderValueWithParameters
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpStatusCode = shared.Ktor_httpHttpStatusCode
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_ReadSession = shared.Ktor_ioReadSession
  public typealias class__stdlib__kotlin_coroutines_CoroutineContext_Key = shared.KotlinCoroutineContextKey
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpResponseData = shared.Ktor_client_coreHttpResponseData
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineDispatcher = shared.Kotlinx_coroutines_coreCoroutineDispatcher
  public typealias class__stdlib__kotlin_coroutines_AbstractCoroutineContextElement = shared.KotlinAbstractCoroutineContextElement
  public typealias class__stdlib__kotlin_coroutines_ContinuationInterceptor = shared.KotlinContinuationInterceptor
  public typealias class__io_ktor_ktor_http__io_ktor_http_Url = shared.Ktor_httpUrl
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMethod = shared.Ktor_httpHttpMethod
  public typealias class__io_ktor_ktor_utils__io_ktor_util_pipeline_PipelinePhase = shared.Ktor_utilsPipelinePhase
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory_Companion = shared.Ktor_ioMemory.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer_Companion = shared.Ktor_ioBuffer.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_pool_ObjectPool = shared.Ktor_ioObjectPool
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer_Companion = shared.Ktor_ioChunkBuffer.Companion
  public typealias class__stdlib__kotlin_collections_ByteIterator = shared.KotlinByteIterator
  public typealias class__stdlib__kotlin_collections_Iterator = shared.KotlinIterator
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_Input_Companion = shared.Ktor_ioInput.Companion
  public typealias class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket_Companion = shared.Ktor_ioByteReadPacket.Companion
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ChildHandle = shared.Kotlinx_coroutines_coreChildHandle
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_DisposableHandle = shared.Kotlinx_coroutines_coreDisposableHandle
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ChildJob = shared.Kotlinx_coroutines_coreChildJob
  public typealias class__stdlib__kotlin_sequences_Sequence = shared.KotlinSequence
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectClause0 = shared.Kotlinx_coroutines_coreSelectClause0
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_call_HttpClientCall_Companion = shared.Ktor_client_coreHttpClientCall.Companion
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequest = shared.Ktor_client_coreHttpRequest
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMessage = shared.Ktor_httpHttpMessage
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponse = shared.Ktor_client_coreHttpResponse
  public typealias class__stdlib__kotlin_reflect_KType = shared.KotlinKType
  public typealias class__stdlib__kotlin_ranges_LongRange = shared.KotlinLongRange
  public typealias class__stdlib__kotlin_ranges_LongProgression = shared.KotlinLongProgression
  public typealias class__stdlib__kotlin_collections_Iterable = shared.KotlinIterable
  public typealias class__stdlib__kotlin_ranges_ClosedRange = shared.KotlinClosedRange
  public typealias class__stdlib__kotlin_ranges_OpenEndRange = shared.KotlinOpenEndRange
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_selects_SelectInstance = shared.Kotlinx_coroutines_coreSelectInstance
  public typealias class__io_insert_koin_koin_core__org_koin_core_definition_KoinDefinition = shared.Koin_coreKoinDefinition
  public typealias class__io_insert_koin_koin_core__org_koin_core_instance_InstanceFactory = shared.Koin_coreInstanceFactory
  public typealias class__io_insert_koin_koin_core__org_koin_core_instance_SingleInstanceFactory = shared.Koin_coreSingleInstanceFactory
  public typealias class__io_insert_koin_koin_core__org_koin_dsl_ScopeDSL = shared.Koin_coreScopeDSL
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_CompositeEncoder = shared.Kotlinx_serialization_coreCompositeEncoder
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_modules_SerializersModule = shared.Kotlinx_serialization_coreSerializersModule
  public typealias class__stdlib__kotlin_Annotation = shared.KotlinAnnotation
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_encoding_CompositeDecoder = shared.Kotlinx_serialization_coreCompositeDecoder
  public typealias class__stdlib__kotlin_Nothing = shared.KotlinNothing
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_engine_ProxyConfig = shared.Ktor_client_coreProxyConfig
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_plugins_HttpClientPlugin = shared.Ktor_client_coreHttpClientPlugin
  public typealias class__io_ktor_ktor_events__io_ktor_events_EventDefinition = shared.Ktor_eventsEventDefinition
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpReceivePipeline_Phases = shared.Ktor_client_coreHttpReceivePipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestPipeline_Phases = shared.Ktor_client_coreHttpRequestPipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestBuilder = shared.Ktor_client_coreHttpRequestBuilder
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMessageBuilder = shared.Ktor_httpHttpMessageBuilder
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponsePipeline_Phases = shared.Ktor_client_coreHttpResponsePipeline.Phases
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_statement_HttpResponseContainer = shared.Ktor_client_coreHttpResponseContainer
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpSendPipeline_Phases = shared.Ktor_client_coreHttpSendPipeline.Phases
  public typealias class__io_insert_koin_koin_core__org_koin_core_scope_ScopeCallback = shared.Koin_coreScopeCallback
  public typealias class__stdlib__kotlin_Enum_Companion = shared.KotlinEnumCompanion
  public typealias class__io_insert_koin_koin_core__org_koin_core_logger_Level = shared.__Koin_coreLevel
  public typealias swift__Koin_coreLevel = shared.Koin_coreLevel
  public typealias class__io_insert_koin_koin_core__org_koin_core_extension_KoinExtension = shared.Koin_coreKoinExtension
  public typealias class__io_insert_koin_koin_core__org_koin_core_registry_ScopeRegistry_Companion = shared.Koin_coreScopeRegistry.Companion
  public typealias class__stdlib__kotlin_collections_Map_Entry = shared.KotlinMapEntry
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueParam = shared.Ktor_httpHeaderValueParam
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeaderValueWithParameters_Companion = shared.Ktor_httpHeaderValueWithParameters.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_ContentType_Companion = shared.Ktor_httpContentType.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpStatusCode_Companion = shared.Ktor_httpHttpStatusCode.Companion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_GMTDate = shared.Ktor_utilsGMTDate
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpProtocolVersion = shared.Ktor_httpHttpProtocolVersion
  public typealias class__stdlib__kotlin_coroutines_Continuation = shared.KotlinContinuation
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_CoroutineDispatcher_Key = shared.Kotlinx_coroutines_coreCoroutineDispatcher.Key
  public typealias class__stdlib__kotlin_coroutines_AbstractCoroutineContextKey = shared.KotlinAbstractCoroutineContextKey
  public typealias class__io_ktor_ktor_http__io_ktor_http_Url_Companion = shared.Ktor_httpUrl.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_Parameters = shared.Ktor_httpParameters
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLProtocol = shared.Ktor_httpURLProtocol
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpMethod_Companion = shared.Ktor_httpHttpMethod.Companion
  public typealias class__org_jetbrains_kotlinx_kotlinx_coroutines_core__kotlinx_coroutines_ParentJob = shared.Kotlinx_coroutines_coreParentJob
  public typealias class__stdlib__kotlin_reflect_KTypeProjection = shared.KotlinKTypeProjection
  public typealias class__stdlib__kotlin_ranges_LongProgression_Companion = shared.KotlinLongProgression.Companion
  public typealias class__stdlib__kotlin_collections_LongIterator = shared.KotlinLongIterator
  public typealias class__stdlib__kotlin_ranges_LongRange_Companion = shared.KotlinLongRange.Companion
  public typealias class__io_insert_koin_koin_core__org_koin_core_definition_BeanDefinition = shared.Koin_coreBeanDefinition
  public typealias class__io_insert_koin_koin_core__org_koin_core_instance_InstanceFactory_Companion = shared.Koin_coreInstanceFactoryCompanion
  public typealias class__io_insert_koin_koin_core__org_koin_core_instance_InstanceContext = shared.Koin_coreInstanceContext
  public typealias class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_modules_SerializersModuleCollector = shared.Kotlinx_serialization_coreSerializersModuleCollector
  public typealias class__io_ktor_ktor_http__io_ktor_http_HeadersBuilder = shared.Ktor_httpHeadersBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValuesBuilderImpl = shared.Ktor_utilsStringValuesBuilderImpl
  public typealias class__io_ktor_ktor_utils__io_ktor_util_StringValuesBuilder = shared.Ktor_utilsStringValuesBuilder
  public typealias class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestBuilder_Companion = shared.Ktor_client_coreHttpRequestBuilder.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLBuilder = shared.Ktor_httpURLBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_GMTDate_Companion = shared.Ktor_utilsGMTDate.Companion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay = shared.__Ktor_utilsWeekDay
  public typealias swift__Ktor_utilsWeekDay = shared.Ktor_utilsWeekDay
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_Month = shared.__Ktor_utilsMonth
  public typealias swift__Ktor_utilsMonth = shared.Ktor_utilsMonth
  public typealias class__io_ktor_ktor_http__io_ktor_http_HttpProtocolVersion_Companion = shared.Ktor_httpHttpProtocolVersion.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLProtocol_Companion = shared.Ktor_httpURLProtocol.Companion
  public typealias class__stdlib__kotlin_reflect_KVariance = shared.__KotlinKVariance
  public typealias swift__KotlinKVariance = shared.KotlinKVariance
  public typealias class__stdlib__kotlin_reflect_KTypeProjection_Companion = shared.KotlinKTypeProjection.Companion
  public typealias class__io_insert_koin_koin_core__org_koin_core_definition_Kind = shared.__Koin_coreKind
  public typealias swift__Koin_coreKind = shared.Koin_coreKind
  public typealias class__io_insert_koin_koin_core__org_koin_core_definition_Callbacks = shared.Koin_coreCallbacks
  public typealias class__io_ktor_ktor_http__io_ktor_http_URLBuilder_Companion = shared.Ktor_httpURLBuilder.Companion
  public typealias class__io_ktor_ktor_http__io_ktor_http_ParametersBuilder = shared.Ktor_httpParametersBuilder
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion = shared.__Ktor_utilsWeekDay.Companion
  public typealias class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion = shared.__Ktor_utilsMonth.Companion
  public typealias file__shared____SkieSuspendWrappersKt = shared.__SkieSuspendWrappersKt
  public typealias file__shared__SkieTypeExportsKt = shared.SkieTypeExportsKt
  public typealias file__DailyPulse_shared__ArticlesModuleKt = shared.ArticlesModuleKt
  public typealias file__DailyPulse_shared__SourcesModuleKt = shared.SourcesModuleKt
  public typealias file__DailyPulse_shared__DatabaseModuleKt = shared.DatabaseModuleKt
  public typealias file__DailyPulse_shared__NetworkModuleKt = shared.NetworkModuleKt
  public typealias file__DailyPulse_shared__SharedKoinModulesKt = shared.SharedKoinModulesKt
  public typealias file__DailyPulse_shared__KoinInitializerKt = shared.KoinInitializerKt
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readShort() async throws -> shared.KotlinShort
  #endif
}
extension shared.ArticlesService {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchArticles() async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticleRaw]
  #endif
}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum, b: shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum where SEALED : shared.Kotlinx_coroutines_coreSelectInstance
@frozen public enum Koin_coreLevel : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case debug
  case info
  case warning
  case error
  case none
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level, result: inout shared.Koin_coreLevel?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level, result: inout shared.Koin_coreLevel?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level?) -> shared.Koin_coreLevel
  public func _bridgeToObjectiveC() -> shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level
  public typealias _ObjectiveCType = shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.Koin_coreLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.Koin_coreLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension shared.KotlinSuspendFunction2 {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(p1: Any?, p2: Any?) async throws -> Any?
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public var value: T? {
    get
  }
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalStateFlow<T>._ObjectiveCType?) -> shared.SkieSwiftOptionalStateFlow<T>
  @objc deinit
}
#endif
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readFloat() async throws -> shared.KotlinFloat
  #endif
}
extension shared.SourcesRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getAllSources() async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourceRaw]
  #endif
}
extension shared.Ktor_httpOutgoingContent.ProtocolUpgrade {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upgrade(input: any shared.Ktor_ioByteReadChannel, output: any shared.Ktor_ioByteWriteChannel, engineContext: any shared.KotlinCoroutineContext, userContext: any shared.KotlinCoroutineContext) async throws -> any shared.Kotlinx_coroutines_coreJob
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readLong() async throws -> shared.KotlinLong
  #endif
}
extension shared.__SwiftGen.Kotlinx_serialization_corePolymorphicKind {
  @frozen public enum Enum {
    case oPEN(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_OPEN)
    case sEALED(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind_SEALED)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_serialization_corePolymorphicKind.Enum where SEALED : shared.Kotlinx_serialization_corePolymorphicKind
extension shared.ArticlesUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getArticles(forceFetch: Swift.Bool) async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_application_Article]
  #endif
}
extension shared.__SwiftGen.Skie_SuspendResult {
  @frozen public enum Enum {
    case canceled(shared.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Canceled)
    case error(shared.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Error)
    case success(shared.__Skie.class__co_touchlab_skie_runtime_kotlin__co_touchlab_skie_runtime_coroutines_suspend_Skie_SuspendResult_Success)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Skie_SuspendResult.Enum where SEALED : shared.Skie_SuspendResult
extension shared.RuntimeSuspendingTransacter {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func transactionWithResult(noEnclosing: Swift.Bool, bodyWithReturn: any shared.KotlinSuspendFunction1) async throws -> Any?
  #endif
}
extension shared.__SkieSuspendWrappersKt {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public static func execute<TSubject, TContext>(_ dispatchReceiver: shared.Ktor_utilsPipeline<TSubject, TContext>, context: TContext, subject: TSubject) async throws -> TSubject where TSubject : AnyObject, TContext : AnyObject
  #endif
}
extension shared.__SwiftGen.Kotlinx_serialization_coreSerialKind {
  @frozen public enum Enum {
    case polymorphicKind(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PolymorphicKind)
    case primitiveKind(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind)
    case cONTEXTUAL(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_CONTEXTUAL)
    case eNUM(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_SerialKind_ENUM)
    case structureKind(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_serialization_coreSerialKind.Enum where SEALED : shared.Kotlinx_serialization_coreSerialKind
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readRemaining(limit: Swift.Int64) async throws -> shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket
  #endif
}
@frozen public enum Ktor_utilsWeekDay : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case monday
  case tuesday
  case wednesday
  case thursday
  case friday
  case saturday
  case sunday
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.String {
    get
  }
  public static var companion: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay, result: inout shared.Ktor_utilsWeekDay?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay, result: inout shared.Ktor_utilsWeekDay?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay?) -> shared.Ktor_utilsWeekDay
  public func _bridgeToObjectiveC() -> shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
  public typealias Companion = shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay_Companion
  public typealias _ObjectiveCType = shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_WeekDay
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.Ktor_utilsWeekDay]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.Ktor_utilsWeekDay] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeByte(b: Swift.Int8) async throws
  #endif
}
extension shared.SourcesUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getSources() async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_application_Source]
  #endif
}
extension shared.__SwiftGen.Kotlinx_serialization_corePrimitiveKind {
  @frozen public enum Enum {
    case bOOLEAN(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BOOLEAN)
    case bYTE(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_BYTE)
    case cHAR(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_CHAR)
    case dOUBLE(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_DOUBLE)
    case fLOAT(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_FLOAT)
    case iNT(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_INT)
    case lONG(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_LONG)
    case sHORT(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_SHORT)
    case sTRING(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_PrimitiveKind_STRING)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_serialization_corePrimitiveKind.Enum where SEALED : shared.Kotlinx_serialization_corePrimitiveKind
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readUTF8Line(limit: Swift.Int32) async throws -> Swift.String?
  #endif
}
extension shared.RuntimeQueryResult {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func await() async throws -> Any?
  #endif
}
extension shared.KotlinKVariance {
  public func toKotlinEnum() -> shared.__Skie.class__stdlib__kotlin_reflect_KVariance
}
extension shared.__KotlinKVariance {
  public func toSwiftEnum() -> shared.KotlinKVariance
}
extension shared.KotlinLazyThreadSafetyMode {
  public func toKotlinEnum() -> shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode
}
extension shared.__KotlinLazyThreadSafetyMode {
  public func toSwiftEnum() -> shared.KotlinLazyThreadSafetyMode
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public var value: T {
    get
  }
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftStateFlow<T>._ObjectiveCType?) -> shared.SkieSwiftStateFlow<T>
  @objc deinit
}
#endif
@frozen public enum KotlinLazyThreadSafetyMode : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case synchronized
  case publication
  case none
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode, result: inout shared.KotlinLazyThreadSafetyMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode, result: inout shared.KotlinLazyThreadSafetyMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode?) -> shared.KotlinLazyThreadSafetyMode
  public func _bridgeToObjectiveC() -> shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode
  public typealias _ObjectiveCType = shared.__Skie.class__stdlib__kotlin_LazyThreadSafetyMode
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.KotlinLazyThreadSafetyMode]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.KotlinLazyThreadSafetyMode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension shared.Kotlinx_coroutines_coreJob {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func join() async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readPacket(size: Swift.Int32) async throws -> shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket
  #endif
}
extension shared.Koin_coreLevel {
  public func toKotlinEnum() -> shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_logger_Level
}
extension shared.__Koin_coreLevel {
  public func toSwiftEnum() -> shared.Koin_coreLevel
}
extension shared.Koin_coreKind {
  public func toKotlinEnum() -> shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind
}
extension shared.__Koin_coreKind {
  public func toSwiftEnum() -> shared.Koin_coreKind
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readByte() async throws -> shared.KotlinByte
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = shared.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var value: T? {
    get
    set
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType?) -> shared.SkieSwiftOptionalMutableStateFlow<T>
  @objc deinit
}
#endif
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum, b: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum where SEALED : shared.Kotlinx_coroutines_coreSelectClause2
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum, b: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum where SEALED : shared.Kotlinx_coroutines_coreSelectClause0
extension shared.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
extension shared.RuntimeSuspendingTransacter {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func transaction(noEnclosing: Swift.Bool, body: any shared.KotlinSuspendFunction1) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readDouble() async throws -> shared.KotlinDouble
  #endif
}
public enum __SwiftGen {
}
extension shared.__SwiftGen {
  public enum Skie_SuspendResult {
  }
}
extension shared.__SwiftGen {
  public enum RuntimeTransacterBase {
  }
}
extension shared.__SwiftGen {
  public enum Ktor_httpOutgoingContent {
  }
}
extension shared.__SwiftGen {
  public enum RuntimeQueryResult {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_serialization_corePolymorphicKind {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_serialization_coreSerialKind {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_serialization_corePrimitiveKind {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_serialization_coreStructureKind {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause1 {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause2 {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectClause0 {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_coroutines_coreSelectInstance {
  }
}
extension shared.__SwiftGen {
  public enum Kotlinx_serialization_coreSerializersModule {
  }
}
extension shared.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any shared.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readBoolean() async throws -> shared.KotlinBoolean
  #endif
}
extension shared.Ktor_utilsMonth {
  public func toKotlinEnum() -> shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
}
extension shared.__Ktor_utilsMonth {
  public func toSwiftEnum() -> shared.Ktor_utilsMonth
}
@frozen public enum KotlinKVariance : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case invariant
  case `in`
  case out
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_reflect_KVariance, result: inout shared.KotlinKVariance?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_reflect_KVariance, result: inout shared.KotlinKVariance?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__stdlib__kotlin_reflect_KVariance?) -> shared.KotlinKVariance
  public func _bridgeToObjectiveC() -> shared.__Skie.class__stdlib__kotlin_reflect_KVariance
  public typealias _ObjectiveCType = shared.__Skie.class__stdlib__kotlin_reflect_KVariance
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.KotlinKVariance]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.KotlinKVariance] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeDouble(d: Swift.Double) async throws
  #endif
}
extension shared.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getResponseContent() async throws -> any shared.Ktor_ioByteReadChannel
  #endif
}
extension shared.__SwiftGen.RuntimeTransacterBase {
  @frozen public enum Enum {
    case suspendingTransacter(any shared.RuntimeSuspendingTransacter)
    case transacter(any shared.RuntimeTransacter)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.RuntimeTransacterBase.Enum where SEALED : shared.RuntimeTransacterBase
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func peekTo(destination: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory, destinationOffset: Swift.Int64, offset: Swift.Int64, min: Swift.Int64, max: Swift.Int64) async throws -> shared.KotlinLong
  #endif
}
@frozen public enum Koin_coreKind : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case singleton
  case factory
  case scoped
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind, result: inout shared.Koin_coreKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind, result: inout shared.Koin_coreKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind?) -> shared.Koin_coreKind
  public func _bridgeToObjectiveC() -> shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind
  public typealias _ObjectiveCType = shared.__Skie.class__io_insert_koin_koin_core__org_koin_core_definition_Kind
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.Koin_coreKind]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.Koin_coreKind] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: shared.SkieSwiftStateFlow<shared.KotlinInt> {
    get
  }
  final public var value: T {
    get
    set
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftMutableStateFlow<T>._ObjectiveCType?) -> shared.SkieSwiftMutableStateFlow<T>
  @objc deinit
}
#endif
@frozen public enum Ktor_utilsMonth : Swift.String, Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case january
  case february
  case march
  case april
  case may
  case june
  case july
  case august
  case september
  case october
  case november
  case december
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.String {
    get
  }
  public static var companion: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month, result: inout shared.Ktor_utilsMonth?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month, result: inout shared.Ktor_utilsMonth?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month?) -> shared.Ktor_utilsMonth
  public func _bridgeToObjectiveC() -> shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
  public typealias Companion = shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month_Companion
  public typealias _ObjectiveCType = shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_date_Month
  public init?(rawValue: Swift.String)
  public typealias AllCases = [shared.Ktor_utilsMonth]
  public typealias RawValue = Swift.String
  public static var allCases: [shared.Ktor_utilsMonth] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: shared.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readAvailable(dst: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws -> shared.KotlinInt
  #endif
}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause {
  @frozen public enum Enum {
    case selectClause0(any shared.Kotlinx_coroutines_coreSelectClause0)
    case selectClause1(any shared.Kotlinx_coroutines_coreSelectClause1)
    case selectClause2(any shared.Kotlinx_coroutines_coreSelectClause2)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause.Enum where SEALED : shared.Kotlinx_coroutines_coreSelectClause
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeSuspendSession(visitor: any shared.KotlinSuspendFunction1) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writePacket(packet: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_ByteReadPacket) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readInt() async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFloat(f: Swift.Float) async throws
  #endif
}
extension shared.Ktor_client_coreHttpClientCall {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func bodyNullable(info: shared.__Skie.class__io_ktor_ktor_utils__io_ktor_util_reflect_TypeInfo) async throws -> Any?
  #endif
}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1 {
  @frozen public enum Enum {
    case `else`
    public static func == (a: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum, b: shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum where SEALED : shared.Kotlinx_coroutines_coreSelectClause1
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>) -> shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>) -> shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension shared.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: shared.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: shared.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func awaitFreeSpace() async throws
  #endif
}
extension shared.ArticlesRepository {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getArticles(forceFetch: Swift.Bool) async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_articles_data_ArticleRaw]
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeShort(s: Swift.Int16) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func awaitContent() async throws
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  public typealias Element = T
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func next() async -> shared.SkieSwiftFlowIterator<T>.Element?
  #endif
}
#endif
extension shared.__SwiftGen.Kotlinx_serialization_coreStructureKind {
  @frozen public enum Enum {
    case cLASS(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_CLASS)
    case lIST(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_LIST)
    case mAP(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_MAP)
    case oBJECT(shared.__Skie.class__org_jetbrains_kotlinx_kotlinx_serialization_core__kotlinx_serialization_descriptors_StructureKind_OBJECT)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Kotlinx_serialization_coreStructureKind.Enum where SEALED : shared.Kotlinx_serialization_coreStructureKind
extension shared.__SkieSuspendWrappersKt {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public static func hasNext<E>(_ dispatchReceiver: shared.SkieColdFlowIterator<E>) async throws -> shared.KotlinBoolean where E : AnyObject
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func discard(max: Swift.Int64) async throws -> shared.KotlinLong
  #endif
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = shared.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = shared.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> shared.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> shared.SkieSwiftFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: shared.SkieSwiftFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftFlow<T>._ObjectiveCType, result: inout shared.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: shared.SkieSwiftFlow<T>._ObjectiveCType?) -> shared.SkieSwiftFlow<T>
  @objc deinit
}
#endif
extension shared.KotlinSuspendFunction1 {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke(p1: Any?) async throws -> Any?
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readUTF8LineTo(out: any shared.KotlinAppendable, limit: Swift.Int32) async throws -> shared.KotlinBoolean
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeLong(l: Swift.Int64) async throws
  #endif
}
extension shared.Ktor_client_coreHttpClientEngine {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func execute(data: shared.__Skie.class__io_ktor_ktor_client_core__io_ktor_client_request_HttpRequestData) async throws -> shared.__Skie.class__io_ktor_ktor_client_core__io_ktor_client_request_HttpResponseData
  #endif
}
extension shared.__SwiftGen.Ktor_httpOutgoingContent {
  @frozen public enum Enum {
    case byteArrayContent(shared.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ByteArrayContent)
    case noContent(shared.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_NoContent)
    case protocolUpgrade(shared.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ProtocolUpgrade)
    case readChannelContent(shared.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_ReadChannelContent)
    case writeChannelContent(shared.__Skie.class__io_ktor_ktor_http__io_ktor_http_content_OutgoingContent_WriteChannelContent)
  }
}
public func onEnum<SEALED>(of sealed: SEALED) -> shared.__SwiftGen.Ktor_httpOutgoingContent.Enum where SEALED : shared.Ktor_httpOutgoingContent
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_internal_ChunkBuffer) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: shared.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws -> shared.KotlinInt
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeAvailable(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws -> shared.KotlinInt
  #endif
}
extension shared.SourcesService {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func fetchSources() async throws -> [shared.__Skie.class__DailyPulse_shared__com_petros_efthymiou_dailypulse_sources_data_SourceRaw]
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(memory: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_bits_Memory, startIndex: Swift.Int32, endIndex: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: shared.__Skie.class__io_ktor_ktor_io__io_ktor_utils_io_core_Buffer) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: shared.__Skie.class__stdlib__kotlin_ByteArray, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int32, length: Swift.Int32) async throws
  #endif
}
extension shared.Ktor_ioByteWriteChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeFully(src: Swift.UnsafeMutableRawPointer, offset: Swift.Int64, length: Swift.Int64) async throws
  #endif
}
extension shared.Ktor_ioByteReadChannel {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func readSuspendableSession(consumer: any shared.KotlinSuspendFunction1) async throws
  #endif
}
extension shared.Ktor_httpOutgoingContent.WriteChannelContent {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func writeTo(channel: any shared.Ktor_ioByteWriteChannel) async throws
  #endif
}
extension shared.__SwiftGen.RuntimeQueryResult.Enum : Swift.Equatable {}
extension shared.__SwiftGen.RuntimeQueryResult.Enum : Swift.Hashable {}
extension shared.__SwiftGen.RuntimeQueryResult.Enum : Swift.Sendable {}
extension shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Equatable {}
extension shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Hashable {}
extension shared.__SwiftGen.Kotlinx_serialization_coreSerializersModule.Enum : Swift.Sendable {}
extension shared.Ktor_utilsWeekDay : Swift.RawRepresentable {}
extension shared.Ktor_utilsWeekDay : Swift.Sendable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Equatable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Hashable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectInstance.Enum : Swift.Sendable {}
extension shared.Koin_coreLevel : Swift.RawRepresentable {}
extension shared.Koin_coreLevel : Swift.Sendable {}
extension shared.KotlinKVariance : Swift.RawRepresentable {}
extension shared.KotlinKVariance : Swift.Sendable {}
extension shared.KotlinLazyThreadSafetyMode : Swift.RawRepresentable {}
extension shared.KotlinLazyThreadSafetyMode : Swift.Sendable {}
extension shared.Koin_coreKind : Swift.RawRepresentable {}
extension shared.Koin_coreKind : Swift.Sendable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Equatable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Hashable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause2.Enum : Swift.Sendable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Equatable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Hashable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause0.Enum : Swift.Sendable {}
extension shared.Ktor_utilsMonth : Swift.RawRepresentable {}
extension shared.Ktor_utilsMonth : Swift.Sendable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Equatable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Hashable {}
extension shared.__SwiftGen.Kotlinx_coroutines_coreSelectClause1.Enum : Swift.Sendable {}
